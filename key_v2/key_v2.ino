#include <avr/sleep.h>
#include <avr/pgmspace.h>

// ATtiny85 Default Pin Names
// PB0 - Physical pin 5
// PB1 - Physical pin 6 (LED_BUILTIN)
// PB2 - Physical pin 7 (INT0)
// PB3 - Physical pin 2
// PB4 - Physical pin 3 
// PB5 - Physical pin 1 (RESET, avoid using unless fuse-modified)

// Functional Pin Assignments
#define TX_PIN PB3              // 433MHz Transmitter Data Pin
#define STATUS_LED PB2          // Onboard LED for Transmission Indication
#define SIGNAL_SELECTOR_SWITCH PB0        // Emits signal 1 if this pin is LOW, or signal 2 if this pin is HIGH

// Signal Data (Stored in Flash to save RAM)
const int16_t signal_data_1[] PROGMEM = {41422,-16642,231,-132,2615,-98,227,-228,227,-66,4181,-14770,97,-100,163,-490,227,-66,163,-132,985,-15524,99,-664,131,-298,99,-2218,65,-134,727,-232,233,-68,329,-66,131,-166,38453,-12248,65,-168,97,-330,331,-668,163,-66,197,-134,1221,-328,3275,-16874,855,-64,559,-98,197,-98,1485,-98,129,-98,43863,-848,4113,-820,819,-852,823,-812,5767,-842,7431,-830,1637,-1682,4095,-21476,847,-816,4121,-844,817,-834,809,-850,5741,-860,7411,-844,1641,-1664,4105,-21484,829,-832,4117,-842,811,-848,819,-820,5761,-842,7411,-850,1635,-1648,4109,-21504,731,-1006,3981,-940,707,-944,723,-918,5695,-882,7393,-824,1669,-1636,4121,-21476,801,-930,4019,-932,737,-902,745,-908,5707,-886,7393,-818,1625,-1674,4119,-21474,785,-966,3977,-984,691,-930,703,-940,5685,-906,7385,-846,1635,-1652,4113,-21484,747,-990,3975,-982,685,-926,737,-940,5689,-866,7409,-846,1611,-1678,4107,-21472,763,-970,4005,-960,699,-938,709,-932,5707,-878,7373,-838,1629,-1684,4095,-21498,821,-836,4119,-844,815,-828,809,-844,5775,-828,7399,-842,1635,-1664,4115,-21472,851,-840,4103,-836,807,-844,807,-840,5783,-840,7403,-838,1631,-1660,4121,-21466,769,-960,4011,-916,721,-926,773,-874,5705,-900,7371,-844,1645,-1674,4111,-21466,601,-3768,1349,-964,669,-974,733,-910,5675,-908,7369,-870,1629,-1644,4107,-21496,841,-842,4107,-842,789,-838,815,-844,5773,-832,7431,-808,1639,-1680,4091,-21486,749,-1020,3929,-966,725,-952,717,-924,5693,-884,7375,-834,1635,-1672,4097,-21488,853,-822,4107,-824,839,-840,811,-844,5759,-844,7387,-844,1631,-1656,4137,-21476,763,-940,4019,-932,743,-908,743,-912,5703,-880,7397,-820,1633,-1650,4145,-22494,847,-834,4123,-812,843,-822,813,-846,5769,-828,7407,-842,1633,-1652,4143,-21476,823,-832,4133,-814,807,-834,837,-810,5797,-844,7413,-826,1635,-1636,4135,-21496,811,-844,4127,-808,843,-814,843,-810,5787,-820,7419,-822,1635,-1650,4147,-21460,861,-808,4113,-842,819,-834,809,-848,5767,-828,7405,-836,1639,-1680,4093,-21492,761,-966,4003,-918,729,-900,775,-900,5691,-904,7377,-836,1635,-1658,4129,-21480,815,-848,4121,-812,823,-838,811,-850,5743,-858,7415,-812,1671,-1624,4149,-21474,791,-880,4061,-912,755,-884,783,-858,5727,-880,7397,-808,1667,-1666,4107,-21486,819,-814,4151,-802,837,-816,841,-812,5771,-856,7415,-810,1669,-1650,4119,-21464,793,-902,4067,-886,763,-872,777,-876,5753,-842,7401,-842,1639,-1644,4127,-21492,821,-818,4129,-812,827,-836,843,-814,5755,-838,7443,-816,1643,-1648,4113,-21474,795,-932,4023,-924,735,-904,771,-866,5739,-846,7405,-820,1649,-1676,4113,-21476,841,-814,4141,-812,811,-854,805,-812,5787,-852,7415,-808,1639,-1650,4133,-21492,757,-934,4053,-884,757,-898,767,-872,5725,-878,7397,-838,1637,-1642,4145,-21468,823,-838,4125,-810,843,-826,809,-850,5771,-826,7409,-814,1669,-1652,4101,-21482,641,-1326,99,-1978,1425,-950,697,-936,737,-910,5691,-908,7385,-850,1601,-1678,4119,-21464,761,-962,4019,-922,701,-938,739,-910,5697,-904,7375,-848,1631,-1646,4105,-134776,131,-396,131,-328,65,-330,163,-262,263,-666,163,-202,99,-462,597,-100,299,-100,299,-132,263,-166,65,-298,297,-66,501,-134,331,-132,17117,-10626,65,-1710,229,-1780,97,-132,165,-436,65,-300,131,-528,1225,-200,723,-66,2523,-12294,99,-336,99,-66,65,-196,197,-166,129,-230,65,-66,297,-200,133,-336,67,-330,131,-134,65,-430,527,-198,197,-132,165,-234,131,-134,233,-98,399,-17116,365,-66,65,-366,65,-102,329,-632,163,-200,65,-66,329,-532,65,-66,197,-330,65,-100,197,-98,363,-166,799,-98,365,-134,10843,-15078,65,-1368,99,-398,99,-98,265,-166,167,-100,197,-134,235,-100,529,-132,99,-66,2057,-12812,129,-130,65,-792,97,-132,195,-196,65,-494,167,-132,99,-890,295,-132,195,-130,6609,-12942,65,-3500,199,-132,261,-130,97,-360,197,-428,295,-68,793,-66,787,-98,65,-98,25395,-16818,1813,-100,1095,-132,2487,-14978,97,-1756,199,-432,361,-66,631,-100,893,-16822,129,-790,65,-228,229,-1284,229,-100,131,-198,163,-726,163,-100,163,-262,653,-98,1251,-15500,99,-1562,99,-394,97,-1176,261,-430,295,-100,297,-166,199,-132,67,-132,959,-66,819,-12200,65,-4570,231,-994,67,-98,99,-598,65,-12786,65,-230,165,-100,99,-98,297,-1388,131,-228,65,-164,719,-166,7661,-12158,99,-3042,131,-236,263,-100,167,-1060,1027,-100,795,-12802,65,-792,65,-560,65,-166,65,-426,165,-19060,195,-3008,65,-624,131,-164,231,-130,197,-162,97,-66,425,-100,229,-66,1309,-66,953,-100,261,-13250,99,-402,133,-364,99,-396,67,-98,99,-232,99,-530,433,-232,1053,-166,431,-16148,65,-330,97,-1156,131,-100,97,-134,165,-68,199,-168,299,-98,12337,-15322,133,-934,65,-166,265,-132,99,-364,401,-198,197,-364,653,-66,99,-15430,267,-134,265,-858,99,-596,863,-66,1079,-66,265,-13836,97,-234,99,-266,99,-166,365,-164,97,-228,163,-98,425,-19254,529,-1196,467,-132,65,-300,131,-336,131,-266,65,-200,231,-132,393,-132,65,-68,263,-134,391,-164,99,-98,429,-64,10787,-16450,2053,-100,9231,-13298,99,-2882,99,-168,397,-166,425,-100,163,-196,65,-98,97,-66,197,-298,1891,-66,21093,-12076,65,-360,65,-166,525,-100,129,-266,263,-68,263,-200,197,-66,397,-100,463,-132};
const int16_t signal_data_2[] PROGMEM = {1642,-490,97,-890,65,-632,97,-526,229,-100,1283,-166,699,-98,165,-66,165,-198,765,-2524,265,-134,363,-98,297,-66,393,-164,7729,-7080,65,-66,65,-434,163,-436,263,-98,859,-232,295,-262,195,-622,131,-164,65,-98,195,-724,627,-132,229,-98,457,-100,427,-6998,631,-98,1161,-166,65,-1598,397,-132,331,-298,295,-100,2355,-98,2953,-8214,129,-1450,65,-764,65,-1592,397,-68,397,-134,465,-1890,99,-200,233,-570,295,-100,827,-66,265,-134,331,-66,2719,-8194,97,-366,65,-4994,163,-330,131,-962,165,-298,163,-132,923,-98,495,-98,459,-66,99,-164,391,-166,259,-166,1869,-66,8549,-8076,229,-66,461,-100,593,-98,99,-1480,65,-732,461,-68,529,-66,799,-100,529,-100,7441,-7240,165,-262,129,-492,591,-198,361,-496,65,-166,99,-200,263,-200,65,-990,65,-98,131,-166,195,-102,333,-134,333,-66,889,-134,4921,-13326,197,-168,165,-134,163,-758,99,-164,97,-522,97,-66,459,-166,231,-100,533,-100,429,-98,8311,-8212,729,-496,363,-232,99,-66,163,-134,265,-298,531,-166,331,-132,395,-15992,131,-66,97,-100,361,-330,65,-794,163,-130,97,-1884,363,-66,327,-132,261,-100,327,-132,129,-98,8049,-7252,65,-98,97,-564,959,-332,163,-66,97,-100,263,-130,197,-130,131,-1806,1345,-164,555,-66,4043,-7686,199,-492,165,-7340,429,-130,491,-100,293,-66,163,-198,163,-98,325,-198,163,-132,231,-428,263,-460,459,-66,585,-430,3395,-16412,425,-98,261,-98,99,-198,165,-658,459,-66,165,-196,99,-262,131,-100,197,-164,11549,-3524,65,-4716,331,-198,463,-330,397,-496,165,-132,597,-66,233,-232,195,-68,9809,-6608,99,-132,99,-564,65,-660,197,-66,99,-66,163,-100,65,-66,197,-822,197,-564,65,-66,195,-460,163,-298,199,-166,201,-134,561,-66,263,-98,229,-98,229,-64,1515,-66,5489,-7196,97,-266,197,-562,725,-100,361,-100,231,-168,67,-66,133,-768,97,-166,65,-132,97,-230,7839,-12156,199,-200,99,-166,267,-100,197,-166,263,-630,131,-658,97,-66,595,-166,297,-66,635,-100,3025,-7928,97,-66,99,-1988,97,-5640,265,-264,65,-130,229,-322,199,-1162,161,-164,65,-364,295,-592,491,-66,461,-132,295,-132,2015,-7586,163,-132,131,-198,395,-134,163,-166,231,-200,65,-698,63,-100,197,-164,329,-1000,329,-66,267,-136,333,-134,163,-68,333,-66,401,-8320,165,-66,131,-166,133,-164,561,-200,65,-66,365,-726,65,-132,163,-132,99,-66,97,-98,99,-98,197,-398,329,-134,497,-134,8577,-6522,131,-200,495,-692,165,-66,1027,-500,99,-100,65,-1418,689,-100,6101,-8436,99,-132,97,-1156,63,-66,65,-3674,99,-200,163,-96,163,-360,131,-134,435,-100,665,-98,365,-300,165,-166,195,-100,97,-164,427,-464,591,-166,9321,-5976,99,-394,99,-832,99,-200,65,-268,131,-66,431,-132,133,-66,1259,-230,12245,-3142,2701,-9782,817,-846,4185,-880,819,-854,825,-844,821,-1702,817,-852,851,-1672,845,-3362,851,-3324,873,-826,1671,-856,3363,-18986,687,-160,363,-1128,163,-432,97,-330,199,-974,1553,-948,1585,-908,1633,-878,5019,-900,835,-852,4177,-846,859,-842,813,-852,831,-1710,825,-844,851,-1648,845,-3358,865,-3358,843,-812,1699,-824,3365,-18982,1973,-232,625,-1054,663,-940,1557,-982,1581,-906,763,-1746,5013,-934,795,-872,4179,-850,829,-846,843,-840,819,-1704,839,-844,837,-1672,831,-3362,843,-3350,839,-860,1665,-864,3347,-18972,1953,-266,587,-1066,667,-976,1541,-960,1593,-910,749,-918,799,-876,4175,-944,787,-878,4159,-848,835,-846,839,-854,819,-1702,843,-848,807,-1712,809,-3376,841,-3364,843,-814,1695,-858,3359,-18984,1945,-232,1449,-1860,1553,-950,1587,-942,3281,-900,3319,-924,805,-852,4185,-882,815,-846,827,-844,843,-1680,845,-820,837,-1708,827,-3354,865,-3324,875,-818,1673,-856,3345,-18986,1965,-232,2339,-960,1559,-958,1575,-936,2453,-1740,3321,-914,807,-886,4159,-870,837,-842,825,-842,841,-1678,837,-852,843,-1668,837,-3352,867,-3352,833,-850,1663,-856,3359,-18986,1987,-134,727,-950,3273,-916,1621,-876,793,-886,2471,-906,2465,-942,817,-842,4187,-856,843,-848,805,-854,853,-1672,843,-850,841,-1676,811,-3374,841,-3368,845,-814,1697,-822,3375,-18986,2003,-134,727,-952,729,-942,1593,-916,1613,-912,775,-2568,787,-870,2495,-914,839,-848,4169,-878,803,-852,851,-844,831,-1668,861,-844,815,-1702,839,-3370,843,-3334,855,-844,1669,-852,3355,-5386};

const int16_t* selected_signal;
uint16_t signal_length;
uint16_t pointer = 0;

void setup() {
    // Configure Pins
    pinMode(TX_PIN, OUTPUT);
    pinMode(STATUS_LED, OUTPUT);
    pinMode(SIGNAL_SELECTOR_SWITCH, INPUT_PULLUP);

    // Ensure TX & Antenna are Off
    digitalWrite(TX_PIN, HIGH);
    digitalWrite(STATUS_LED, HIGH);

    delay(10); // Give enough time for the tx to power on

    if (digitalRead(SIGNAL_SELECTOR_SWITCH) == LOW) {
        selected_signal = signal_data_1;
        signal_length = sizeof(signal_data_1) / sizeof(signal_data_1[0]);

        blink(50, 1);
        delay(200);
    } else {
        selected_signal = signal_data_2;
        signal_length = sizeof(signal_data_2) / sizeof(signal_data_2[0]);

        blink(50, 2);
        delay(200);
    }

    digitalWrite(STATUS_LED, LOW);
}

void blink(int interval, int times) {
    for (int i = 0; i < times; i++) {
        digitalWrite(STATUS_LED, HIGH);
        delay(interval);
        digitalWrite(STATUS_LED, LOW);
        delay(interval);
    }
}

bool terminated = false;
uint8_t loop_count = 0;

void loop() {
    if(terminated) {
        return;
    }

    // Transmit the signal with LED indication
    int16_t val = pgm_read_word_near(selected_signal + pointer);

    if (val > 0) {
        digitalWrite(TX_PIN, HIGH);
        digitalWrite(STATUS_LED, HIGH);
    } else {
        digitalWrite(TX_PIN, LOW);
        digitalWrite(STATUS_LED, LOW);
    }

    // First run uses smartDelay, second run uses smarterDelay
    if (loop_count == 0) {
        smartDelay(abs(val));
    } else {
        smarterDelay(abs(val));
    }

    if (++pointer >= signal_length) {
        pointer = 0;  // Reset pointer when end of signal is reached
        digitalWrite(TX_PIN, LOW);
        digitalWrite(STATUS_LED, LOW);
        
        loop_count++;
        if (loop_count == 1) {
            // Pause for 500ms before starting the second loop
            delay(500);
        }
        if (loop_count >= 2) {
            terminated = true;
        }
    }
}

// Function to handle both short and long delays
void smartDelay(uint16_t us) {
    if (us > 16000) {
        delay(us / 1000);  // Convert to milliseconds for longer delays
    } else {
        delayMicroseconds(us);
    }
}

void smarterDelay(int16_t us) {
    if (us > 10000) {
        int16_t ms = us / 1000;
        delay(ms);
        us %= 1000;  // Cleaner remainder calculation
    }
    
    if (us > 0) {  // Only do micros loop if needed
        uint32_t start = micros();
        while (micros() - start < us);
    }
}