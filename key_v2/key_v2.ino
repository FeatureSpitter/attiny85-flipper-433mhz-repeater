#include <avr/sleep.h>
#include <avr/pgmspace.h>

// ATtiny85 Default Pin Names
// PB0 - Physical pin 5
// PB1 - Physical pin 6 (LED_BUILTIN)
// PB2 - Physical pin 7 (INT0)
// PB3 - Physical pin 2
// PB4 - Physical pin 3 
// PB5 - Physical pin 1 (RESET, avoid using unless fuse-modified)

// Functional Pin Assignments
#define TX_PIN PB3              // 433MHz Transmitter Data Pin
#define STATUS_LED PB2          // Onboard LED for Transmission Indication
#define SIGNAL_SELECTOR_SWITCH PB0        // Emits signal 1 if this pin is LOW, or signal 2 if this pin is HIGH

// Signal Data (Stored in Flash to save RAM)
const int32_t signal_data_1[] PROGMEM = {4125,-9928,129,-922,65,-954,197,-98,795,-266,65,-66,131,-300,531,-100,499,-132,99,-100,38515,-9766,163,-1618,161,-98,427,-100,97,-334,397,-100,361,-164,163,-132,199,-66,567,-200,299,-132,227,-100,263,-68,297,-100,4317,-6238,99,-3540,65,-262,65,-730,165,-828,295,-100,99,-134,65,-66,131,-298,395,-130,527,-166,265,-66,199,-134,529,-132,67,-100,891,-100,4651,-10006,195,-98,261,-162,99,-460,689,-166,461,-398,197,-296,197,-100,333,-296,801,-12388,129,-1020,163,-130,161,-164,97,-198,459,-66,589,-98,163,-66,15709,-11116,65,-1484,329,-134,99,-100,201,-100,135,-100,199,-66,169,-336,231,-232,199,-166,229,-132,469,-132,925,-98,11353,-9756,193,-862,363,-232,99,-398,595,-404,65,-234,499,-362,16315,-9788,133,-1084,231,-68,429,-100,131,-168,97,-100,199,-332,431,-100,165,-100,1161,-66,297,-166,6965,-9914,327,-1960,65,-98,197,-100,669,-98,131,-132,131,-132,853,-230,229,-396,1089,-134,4895,-4284,65,-5600,65,-864,163,-300,197,-294,195,-98,361,-130,393,-132,65,-66,197,-98,401,-134,627,-100,461,-68,231,-166,2567,-100,3185,-4504,133,-332,263,-232,131,-332,65,-66,363,-396,267,-100,365,-234,897,-232,163,-100,229,-328,229,-198,1187,-954,4009,-940,713,-914,757,-900,5713,-896,7385,-842,1639,-1648,4121,-21496,727,-1032,2519,-132,1255,-990,701,-968,707,-910,5723,-876,7369,-872,1621,-1670,4097,-21472,751,-1012,2551,-132,1289,-950,717,-960,703,-906,5735,-866,7379,-842,1643,-1644,4129,-21480,561,-3758,1389,-976,673,-990,683,-986,5651,-886,7373,-840,1637,-1670,4111,-21492,633,-3746,1323,-950,727,-932,741,-876,5729,-872,7387,-848,1645,-1656,4107,-21484,667,-3182,1449,-970,701,-940,691,-954,5703,-886,7371,-824,1657,-1642,4133,-21490,727,-1030,3947,-948,729,-932,703,-934,5697,-876,7395,-852,1633,-1646,4113,-7473};
const int32_t signal_data_2[] PROGMEM = {1642,-490,97,-890,65,-632,97,-526,229,-100,1283,-166,699,-98,165,-66,165,-198,765,-2524,265,-134,363,-98,297,-66,393,-164,7729,-7080,65,-66,65,-434,163,-436,263,-98,859,-232,295,-262,195,-622,131,-164,65,-98,195,-724,627,-132,229,-98,457,-100,427,-6998,631,-98,1161,-166,65,-1598,397,-132,331,-298,295,-100,2355,-98,2953,-8214,129,-1450,65,-764,65,-1592,397,-68,397,-134,465,-1890,99,-200,233,-570,295,-100,827,-66,265,-134,331,-66,2719,-8194,97,-366,65,-4994,163,-330,131,-962,165,-298,163,-132,923,-98,495,-98,459,-66,99,-164,391,-166,259,-166,1869,-66,8549,-8076,229,-66,461,-100,593,-98,99,-1480,65,-732,461,-68,529,-66,799,-100,529,-100,7441,-7240,165,-262,129,-492,591,-198,361,-496,65,-166,99,-200,263,-200,65,-990,65,-98,131,-166,195,-102,333,-134,333,-66,889,-134,4921,-13326,197,-168,165,-134,163,-758,99,-164,97,-522,97,-66,459,-166,231,-100,533,-100,429,-98,8311,-8212,729,-496,363,-232,99,-66,163,-134,265,-298,531,-166,331,-132,395,-15992,131,-66,97,-100,361,-330,65,-794,163,-130,97,-1884,363,-66,327,-132,261,-100,327,-132,129,-98,8049,-7252,65,-98,97,-564,959,-332,163,-66,97,-100,263,-130,197,-130,131,-1806,1345,-164,555,-66,4043,-7686,199,-492,165,-7340,429,-130,491,-100,293,-66,163,-198,163,-98,325,-198,163,-132,231,-428,263,-460,459,-66,585,-430,3395,-16412,425,-98,261,-98,99,-198,165,-658,459,-66,165,-196,99,-262,131,-100,197,-164,11549,-3524,65,-4716,331,-198,463,-330,397,-496,165,-132,597,-66,233,-232,195,-68,9809,-6608,99,-132,99,-564,65,-660,197,-66,99,-66,163,-100,65,-66,197,-822,197,-564,65,-66,195,-460,163,-298,199,-166,201,-134,561,-66,263,-98,229,-98,229,-64,1515,-66,5489,-7196,97,-266,197,-562,725,-100,361,-100,231,-168,67,-66,133,-768,97,-166,65,-132,97,-230,7839,-12156,199,-200,99,-166,267,-100,197,-166,263,-630,131,-658,97,-66,595,-166,297,-66,635,-100,3025,-7928,97,-66,99,-1988,97,-5640,265,-264,65,-130,229,-322,199,-1162,161,-164,65,-364,295,-592,491,-66,461,-132,295,-132,2015,-7586,163,-132,131,-198,395,-134,163,-166,231,-200,65,-698,63,-100,197,-164,329,-1000,329,-66,267,-136,333,-134,163,-68,333,-66,401,-8320,165,-66,131,-166,133,-164,561,-200,65,-66,365,-726,65,-132,163,-132,99,-66,97,-98,99,-98,197,-398,329,-134,497,-134,8577,-6522,131,-200,495,-692,165,-66,1027,-500,99,-100,65,-1418,689,-100,6101,-8436,99,-132,97,-1156,63,-66,65,-3674,99,-200,163,-96,163,-360,131,-134,435,-100,665,-98,365,-300,165,-166,195,-100,97,-164,427,-464,591,-166,9321,-5976,99,-394,99,-832,99,-200,65,-268,131,-66,431,-132,133,-66,1259,-230,12245,-3142,2701,-9782,817,-846,4185,-880,819,-854,825,-844,821,-1702,817,-852,851,-1672,845,-3362,851,-3324,873,-826,1671,-856,3363,-18986,687,-160,363,-1128,163,-432,97,-330,199,-974,1553,-948,1585,-908,1633,-878,5019,-900,835,-852,4177,-846,859,-842,813,-852,831,-1710,825,-844,851,-1648,845,-3358,865,-3358,843,-812,1699,-824,3365,-18982,1973,-232,625,-1054,663,-940,1557,-982,1581,-906,763,-1746,5013,-934,795,-872,4179,-850,829,-846,843,-840,819,-1704,839,-844,837,-1672,831,-3362,843,-3350,839,-860,1665,-864,3347,-18972,1953,-266,587,-1066,667,-976,1541,-960,1593,-910,749,-918,799,-876,4175,-944,787,-878,4159,-848,835,-846,839,-854,819,-1702,843,-848,807,-1712,809,-3376,841,-3364,843,-814,1695,-858,3359,-18984,1945,-232,1449,-1860,1553,-950,1587,-942,3281,-900,3319,-924,805,-852,4185,-882,815,-846,827,-844,843,-1680,845,-820,837,-1708,827,-3354,865,-3324,875,-818,1673,-856,3345,-18986,1965,-232,2339,-960,1559,-958,1575,-936,2453,-1740,3321,-914,807,-886,4159,-870,837,-842,825,-842,841,-1678,837,-852,843,-1668,837,-3352,867,-3352,833,-850,1663,-856,3359,-18986,1987,-134,727,-950,3273,-916,1621,-876,793,-886,2471,-906,2465,-942,817,-842,4187,-856,843,-848,805,-854,853,-1672,843,-850,841,-1676,811,-3374,841,-3368,845,-814,1697,-822,3375,-18986,2003,-134,727,-952,729,-942,1593,-916,1613,-912,775,-2568,787,-870,2495,-914,839,-848,4169,-878,803,-852,851,-844,831,-1668,861,-844,815,-1702,839,-3370,843,-3334,855,-844,1669,-852,3355,-5386};

const int32_t* selected_signal;
uint16_t signal_length;
uint16_t pointer = 0;

void setup() {
    // Configure Pins
    pinMode(TX_PIN, OUTPUT);
    pinMode(STATUS_LED, OUTPUT);
    pinMode(SIGNAL_SELECTOR_SWITCH, INPUT_PULLUP);

    // Ensure TX & Antenna are Off
    digitalWrite(TX_PIN, HIGH);
    digitalWrite(STATUS_LED, HIGH);

    delay(10); // Give enough time for the tx to power on

    if (digitalRead(SIGNAL_SELECTOR_SWITCH) == LOW) {
        selected_signal = signal_data_1;
        signal_length = sizeof(signal_data_1) / sizeof(signal_data_1[0]);

        blink(50, 1);
    } else {
        selected_signal = signal_data_2;
        signal_length = sizeof(signal_data_2) / sizeof(signal_data_2[0]);

        blink(50, 2);
    }

    digitalWrite(STATUS_LED, LOW);
}

void blink(int interval, int times) {
    for (int i = 0; i < times; i++) {
        digitalWrite(STATUS_LED, HIGH);
        delay(interval);
        digitalWrite(STATUS_LED, LOW);
        delay(interval);
    }
}

bool terminated = false;

void loop() {
    if(terminated) {
        return;
    }

    // Transmit the signal with LED indication
      int32_t val = pgm_read_dword_near(selected_signal + pointer);

      if (++pointer >= signal_length) {
        pointer = 0;  // Reset pointer when end of signal is reached
        digitalWrite(TX_PIN, LOW);
        digitalWrite(STATUS_LED, LOW);
        terminated = true;
      }

      if (val > 0) {
          digitalWrite(TX_PIN, HIGH);
          digitalWrite(STATUS_LED, HIGH);
      } else {
          digitalWrite(TX_PIN, LOW);
          digitalWrite(STATUS_LED, LOW);
      }

      smartDelay(abs(val));  // Handle long delays properly
}

// Function to handle both short and long delays
void smartDelay(uint32_t us) {
    if (us > 10000) {
        uint32_t ms = us / 1000;
        delay(ms);
        us %= 1000;  // Cleaner remainder calculation
    }
    
    if (us > 0) {  // Only do micros loop if needed
        uint32_t start = micros();
        while (micros() - start < us);
    }
}