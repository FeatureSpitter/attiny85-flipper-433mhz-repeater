#include <avr/sleep.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

// ATtiny85 Default Pin Names
#define IO_PIN_0 PB0   // Physical pin 5
#define IO_PIN_1 PB1   // Physical pin 6 (LED_BUILTIN)
#define IO_PIN_2 PB2   // Physical pin 7 (INT0)
#define IO_PIN_3 PB3   // Physical pin 2
#define IO_PIN_4 PB4   // Physical pin 3
#define IO_PIN_5 PB5   // Physical pin 1 (RESET, avoid using unless fuse-modified)

// Functional Pin Assignments
#define TX_PIN IO_PIN_3              // 433MHz Transmitter Data Pin
#define BUTTON_PIN IO_PIN_2          // Interrupt Button (Wake-Up on PB2 to GND)
#define ANTENNA_POWER_PIN IO_PIN_4   // Antenna Power (if applicable)
#define STATUS_LED IO_PIN_1          // Onboard LED for Transmission Indication

// Wake-up flag (Set in ISR)
volatile bool wakeUpFlag = false;

// Signal Data (Stored in Flash to save RAM)
const int16_t signal_data[] PROGMEM = {4125,-9928,129,-922,65,-954,197,-98,795,-266,65,-66,131,-300,531,-100,499,-132,99,-100,38515,-9766,163,-1618,161,-98,427,-100,97,-334,397,-100,361,-164,163,-132,199,-66,567,-200,299,-132,227,-100,263,-68,297,-100,4317,-6238,99,-3540,65,-262,65,-730,165,-828,295,-100,99,-134,65,-66,131,-298,395,-130,527,-166,265,-66,199,-134,529,-132,67,-100,891,-100,4651,-10006,195,-98,261,-162,99,-460,689,-166,461,-398,197,-296,197,-100,333,-296,801,-12388,129,-1020,163,-130,161,-164,97,-198,459,-66,589,-98,163,-66,15709,-11116,65,-1484,329,-134,99,-100,201,-100,135,-100,199,-66,169,-336,231,-232,199,-166,229,-132,469,-132,925,-98,11353,-9756,193,-862,363,-232,99,-398,595,-404,65,-234,499,-362,16315,-9788,133,-1084,231,-68,429,-100,131,-168,97,-100,199,-332,431,-100,165,-100,1161,-66,297,-166,6965,-9914,327,-1960,65,-98,197,-100,669,-98,131,-132,131,-132,853,-230,229,-396,1089,-134,4895,-4284,65,-5600,65,-864,163,-300,197,-294,195,-98,361,-130,393,-132,65,-66,197,-98,401,-134,627,-100,461,-68,231,-166,2567,-100,3185,-4504,133,-332,263,-232,131,-332,65,-66,363,-396,267,-100,365,-234,897,-232,163,-100,229,-328,229,-198,1187,-954,4009,-940,713,-914,757,-900,5713,-896,7385,-842,1639,-1648,4121,-21496,727,-1032,2519,-132,1255,-990,701,-968,707,-910,5723,-876,7369,-872,1621,-1670,4097,-21472,751,-1012,2551,-132,1289,-950,717,-960,703,-906,5735,-866,7379,-842,1643,-1644,4129,-21480,561,-3758,1389,-976,673,-990,683,-986,5651,-886,7373,-840,1637,-1670,4111,-21492,633,-3746,1323,-950,727,-932,741,-876,5729,-872,7387,-848,1645,-1656,4107,-21484,667,-3182,1449,-970,701,-940,691,-954,5703,-886,7371,-824,1657,-1642,4133,-21490,727,-1030,3947,-948,729,-932,703,-934,5697,-876,7395,-852,1633,-1646,4113,-21510,827,-822,4119,-840,801,-872,813,-826,5741,-848,7427,-832,1635,-1678,4099,-21486,791,-900,4071,-886,763,-868,805,-838,5763,-846,7397,-848,1633,-1658,4121,-21494,809,-848,4125,-810,823,-836,843,-812,5771,-832,7425,-810,1671,-1650,4093,-21494,793,-908,4051,-880,791,-868,773,-872,5749,-848,7421,-816,1645,-1670,4093,-21480,845,-866,4087,-848,783,-860,807,-842,5755,-836,7431,-812,1673,-1636,4121,-21470,853,-838,4125,-792,839,-844,811,-818,5769,-840,7431,-810,1639,-1682,4097,-21490,789,-906,4081,-848,793,-868,773,-878,5733,-872,7387,-844,1637,-1646,4109,-21500,823,-842,4127,-816,835,-808,851,-818,5769,-832,7423,-812,1671,-1638,4123,-21466,817,-900,4049,-888,765,-872,807,-840,5733,-880,7391,-848,1635,-1650,4123,-22498,843,-822,4129,-820,837,-840,811,-814,5791,-808,7423,-848,1637,-1648,4147,-21472,793,-906,4037,-892,765,-904,777,-844,5757,-840,7405,-850,1635,-1644,4107,-21508,819,-820,4133,-832,809,-844,817,-844,5759,-842,7385,-846,1631,-1682,4087,-21496,811,-870,4091,-834,807,-844,807,-850,5761,-844,7399,-844,1637,-1644,4113,-21474,823,-820,4147,-814,835,-810,851,-816,5771,-828,7429,-808,1637,-1650,4139,-21466,817,-846,4113,-810,821,-838,849,-818,5745,-858,7407,-810,1643,-1644,4123,-21492,817,-844,4123,-810,821,-836,809,-844,5779,-826,7407,-812,1675,-1616,4129,-21478,813,-870,4079,-878,757,-896,771,-872,5735,-868,7393,-810,1639,-1678,4121,-21454,841,-810,4149,-810,819,-836,811,-850,5739,-858,7409,-808,1671,-1650,4097,-21458,821,-870,4079,-880,757,-898,773,-876,5733,-834,7421,-808,1667,-1626,4137,-21460,831,-838,4127,-824,803,-846,831,-806,5785,-830,7409,-810,1671,-1616,4135,-21478,759,-966,3969,-980,687,-928,735,-908,5707,-896,7363,-838,1629,-1676,4093,-21494,791,-900,4043,-916,727,-902,773,-874,5737,-868,7385,-844,1609,-1682,4105,-21462,515,-3878,99,-264,129,-496,101,-968,741,-930,5645,-910,7397,-822,1635,-1652,4111,-21464,793,-958,3983,-952,717,-922,737,-904,5695,-896,7371,-844,1637,-1644,4127,-21448,761,-996,3979,-950,723,-898,771,-874,5705,-900,7361,-872,1601,-1674,4099,-159444,167,-2784,99,-898,235,-364,231,-434,167,-704,197,-98,597,-296,299,-132,2869,-5110,63,-230,97,-532,131,-562,97,-98,97,-298,129,-2276,165,-400,233,-168,65,-232,231,-394,529,-66,887,-394,721,-98,1085,-8212,65,-930,99,-262,63,-1150,99,-998,397,-328,361,-230,365,-296,361,-66,393,-66,261,-66,291,-66,391,-132,787,-66,753,-98,261,-64,14833,-4136,65,-100,131,-558,65,-2248,133,-1292,97,-1294,131,-198,229,-726,197,-396,697,-164,231,-100,165,-166,495,-164,689,-164,491,-66,3961,-12310,433,-434,527,-630,65,-166,1861,-66,363,-66,391,-132,4419,-9254,65,-130,163,-1806,97,-166,65,-794,195,-164,63,-856,299,-264,233,-298,659,-132,791,-66,97,-100,1063,-66,8293,-4386,97,-1210,65,-1020,231,-2446,67,-266,133,-100,165,-100,131,-532,65,-232,233,-264,197,-166,2757,-66,6535,-4052,99,-132,65,-200,231,-3044,65,-66,329,-132,131,-66,131,-332,133,-530,729,-98,2163,-134,8647,-5182,99,-3648,131,-730,65,-764,265,-364,133,-336,231,-166,893,-100,497,-132,727,-66,12715,-1408,65,-2906,163,-292,195,-232,67,-66,129,-564,263,-432,231,-960,199,-100,333,-100,263,-100,199,-66,299,-66,1257,-98,1259,-5774,99,-894,97,-998,133,-1366,197,-100,201,-98,133,-132,565,-98,131,-100,65,-296,931,-66,8387,-10234,199,-66,133,-132,67,-100,131,-132,433,-628,561,-68,265,-68,9149,-2144,99,-3514,65,-4020,67,-396,99,-98,97,-532,65,-168,133,-332,65,-164,97,-166,133,-134,533,-100,8431,-3752,133,-1132,199,-1126,163,-260,131,-852,65,-1316,65,-664,99,-66,65,-134,65,-332,399,-598,133,-266,131,-132,1159,-100,363,-100,397,-232,497,-100,33189,-4604,65,-3196,99,-66,297,-494,131,-460,165,-130,527,-66,365,-68,791,-66,523,-232,32435,-7506,131,-2162,397,-132,199,-600,131,-664,97,-66,231,-66,267,-132,433,-66,301,-198,9421,-5188,163,-2306,65,-2148,231,-424,229,-132,131,-394,65,-330,759,-98,785,-66,225,-164,1479,-66,721,-8718,231,-1522,199,-2012,297,-566,267,-134,67,-130,195,-430,65,-100,731,-134,231,-236,1727,-366,497,-3756,99,-1034,199,-98,131,-262,131,-1124,65,-1484,97,-1524,131,-100,133,-626,197,-64,65,-64,65,-296,555,-100,14203,-4020,65,-4752,67,-100,131,-168,233,-164,99,-100,231,-368,99,-200,263,-132,1029,-66,9431,-3926,63,-494,165,-168,99,-956,393,-100,393,-132,65,-266,199,-500,1361,-132,333,-100,365,-68,5909,-8582,65,-992,131,-1452,99,-1524,131,-68,197,-492,99,-98,163,-166,197,-424,1441,-98,787,-66,1675,-436,199,-68,131,-3120,131,-132,65,-896,497,-166,329,-132,525,-100,767,-3978,97,-598,65,-698,99,-1826,131,-1130,99,-168,365,-68,363,-98,201,-100,329,-100,263,-66,231,-132,3499,-8376,97,-134,65,-334,99,-166,99,-1960,97,-764,131,-168,167,-200,199,-134,99,-232,329,-364,165,-100,2429,-100,4043,-8498,97,-1358,97,-200,99,-1032,163,-430,597,-102,265,-298,3777,-66,6413,-200,103,-2188,65,-1224,233,-232,99,-132,99,-1062,99,-800,133,-370,131,-530,463,-168,65,-68,295,-366,1759,-66,329,-100,5919,-8404,163,-194,131,-130,65,-658,165,-196,65,-1120,131,-1396,463,-98,163,-334,99,-232,131,-266,759,-98,493,-98,625,-66,597,-4172,63,-132,131,-922,163,-258,97,-956,131,-490,163,-394,631,-430,131,-198,721,-64,325,-6034,131,-860,299,-166,67,-164,67,-300,199,-466,99,-168,65,-434,99,-1164,65,-132,231,-232,565,-100,131,-100,165,-134,165,-166,2615,-13678,165,-334,233,-100,263,-2350,331,-98,231,-66,599,-728,65,-66,857,-66,1351,-98,3791,-8366,131,-336,65,-366,363,-556,395,-166,263,-334,329,-100,133,-98,1515,-420,99,-2652,65,-1234,99,-830,133,-232,163,-794,65,-920,65,-1250,99,-696,163,-132,131,-132,97,-66,463,-66,3601,-64};
const uint16_t signal_length = sizeof(signal_data) / sizeof(signal_data[0]);

// Function to enter sleep mode
void enterSleepMode() {
    cli();  // Disable interrupts temporarily
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    sleep_enable();
    sei();  // Re-enable interrupts
    sleep_cpu();  // Enter sleep mode
    sleep_disable();  // Resume execution after wake-up
}

// ISR for External Interrupt (Wakes Up ATtiny85)
ISR(INT0_vect) {
    wakeUpFlag = true;  // Set flag to indicate wake-up event
}

void setup() {
    // Configure Pins
    pinMode(TX_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);  // Enable pull-up resistor for button
    pinMode(ANTENNA_POWER_PIN, OUTPUT);
    pinMode(STATUS_LED, OUTPUT);

    // Ensure TX & Antenna are Off
    digitalWrite(TX_PIN, LOW);
    digitalWrite(ANTENNA_POWER_PIN, LOW);
    
    // Blink LED 5 times at startup
    for (int i = 0; i < 5; i++) {
        digitalWrite(STATUS_LED, HIGH);
        delay(500);
        digitalWrite(STATUS_LED, LOW);
        delay(500);
    }

    // Configure External Interrupt on BUTTON_PIN (PB2/INT0)
    cli();  // Disable interrupts to prevent conflicts
    GIMSK |= (1 << INT0);   // Enable INT0 interrupt
    MCUCR |= (1 << ISC01);  // Set interrupt on FALLING EDGE (Button press to GND)
    sei();  // Enable global interrupts
}

void loop() {
    wakeUpFlag = false;  // Reset wake-up flag before sleeping
    enterSleepMode();    // Put ATtiny85 into deep sleep mode

    if (wakeUpFlag) {  // Check if wake-up was triggered
        wakeUpFlag = false;

        // Power up the antenna
        digitalWrite(ANTENNA_POWER_PIN, HIGH);
        delay(5);  // Allow antenna module to stabilize

        // Transmit the signal with LED indication
        for (uint16_t i = 0; i < signal_length; i++) {
            int16_t val = pgm_read_word_near(&signal_data[i]);  // Read from PROGMEM

            if (val > 0) {
                digitalWrite(TX_PIN, HIGH);
                digitalWrite(STATUS_LED, HIGH);
            } else {
                digitalWrite(TX_PIN, LOW);
                digitalWrite(STATUS_LED, LOW);
            }

            smartDelay(abs(val));  // Handle long delays properly
        }

        // Ensure transmitter is idle
        digitalWrite(TX_PIN, LOW);
        digitalWrite(STATUS_LED, LOW);

        // Power down the antenna
        digitalWrite(ANTENNA_POWER_PIN, LOW);

        // Add debounce delay to avoid re-triggering
        delay(500);
    }
}

// Function to handle both short and long delays
void smartDelay(uint16_t us) {
    if (us > 16000) {
        delay(us / 1000);  // Convert to milliseconds for longer delays
    } else {
        delayMicroseconds(us);
    }
}
